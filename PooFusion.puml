@startuml

hide circle
skinparam classattributeiconsize 0
skinparam classFontStyle bold

interface Duplicable<<Interfaz>> {
   + {abstract} copia (): Duplicable
}

class Persona {
   - apeNom: string
   - nif: string
}

class Contrato {
   - fechaAlta: int {Formato: YYYYMMDD}
   - mesesPermanencia: int
   - cuentaBancaria: string
   - activo: bool
   + Contrato ( p: Persona )
   + Contrato( orig: Contrato)
   + addProducto ( ci: ConexionInternet )
   + addProducto ( p: Producto )
}

abstract class Producto<<abstract>> {
   - precioMensual: float
   + Producto ( precio: float )
   + {abstract} copia(): Duplicable
   + {abstract} getDescripcion(): string
}

class ConexionInternet {
   - tipo: string
   - velocidadMB: int
   + copia(): Duplicable
   + getDescripcion (): string
}

class Canal {
   - nombre: string
   + copia(): Duplicable
   + getDescripcion (): string
}

class PaqueteDeCanales {
   - descuento: float
   + addCanal ( c: Canal )
   + copia(): Duplicable
   + getDescripcion (): string
   + getPrecioMensual (): float
}

class Contenedor<T> {
   - elementos[MAX_TAM]: T
   - numElementos: int
   - maxElementos: int
   - vacio: T

   - compactar ( inicio: int )
   + Contenedor ( tamMaximo: int, vVacio: T = T() )
   + addElemento ( nE: T )
   + getElemento ( cual: int ): T
   + sacaElemento ( cual: int ): T
   + getNumElementos (): int
   + vaciar ()
}

class PooFusionExc<<Exception>> {
   - fichero: string
   - función: string
   - mensaje: string
   + quePasa(): cadena
}
note bottom of PooFusionExc
   Todas las clases lanzan
   excepciones de este tipo
   salvo Contenedor
end note

class std::invalid_argument

class "Contenedor<Canal*>" as CC {
}

class "Contenedor<Producto*>" as CP{
}


Contrato -- "1\nabonado" Persona: >
Producto <|-- ConexionInternet 
Producto <|-- Canal
Producto <|-- PaqueteDeCanales
Contenedor <|.. CP: <<bind>>\n<T->Producto*>
Contrato ..> CP
Contrato *-- "1..10" Producto
Duplicable <|.. Producto: <<implements>>
Contenedor <|.. CC: <<bind>>\n<T->Canal*>
PaqueteDeCanales o-- "1..5"Canal
PaqueteDeCanales ..> CC

note as Nota1
   El diagrama no incluye constructores
   por defecto y de copia, destructores,
   setters y getters

   Los tipos, salvo casos concretos, no
   llevan & ni *, pero a la hora de
   implementar sí hay que ponerlos ;-). 
   Está así por hacer que el UML sea lo
   más "ajeno" posible al lenguaje de
   programación
end note

@enduml