@startuml

hide circle
skinparam classattributeiconsize 0
skinparam classFontStyle bold

class Persona {
   - apeNom: string
   - nif: string
}

class Contrato {
   - fechaAlta: int {Formato: YYYYMMDD}
   - mesesPermanencia: int
   - cuentaBancaria: string
   - activo: bool
   - productos[MAX_PRODUCTOS]: Producto*
   - numProductos: int = 0
   - tieneConexionInternet: bool
   + Contrato ( p: Persona )
   + addProducto (ci: ConexionIternet)
   + addProducto (c: Canal)
   + addProducto (pc: PaqueteCanales)
   + getProducto( cual: entero): Producto
   + getNumProductos()
   + tieneConexionInternet(): bool
}

class Producto {
   - precioMensual: float
   + Producto ( precio: float )
   + getPrecioMensual(): float
}

class ConexionInternet {
   - tipo: string
   - velocidadMB: int
}

class Canal {
   - nombre: string
}

class PaqueteDeCanales {
   - descuento: float
   + addCanal ( c: Canal )
}


class PooFusionExc<<Exception>> {
   - fichero: string
   - función: string
   - mensaje: string
   + quePasa(): cadena
}
note bottom of PooFusionExc
   Todas las clases lanzan
   excepciones de este tipo
   salvo Contenedor
end note

class std::invalid_argument

Contrato -- "1\nabonado" Persona: >
Producto <|-- ConexionInternet 
Producto <|-- Canal
Producto <|-- PaqueteDeCanales
Contrato *-- "1..10" Producto
PaqueteDeCanales o-- "1..5"Canal

note as Nota1
   El diagrama no incluye constructores
   por defecto y de copia, destructores,
   setters y getters

   Los tipos, salvo casos concretos, no
   llevan & ni *, pero a la hora de
   implementar sí hay que ponerlos ;-). 
   Está así por hacer que el UML sea lo
   más "ajeno" posible al lenguaje de
   programación
end note

@enduml